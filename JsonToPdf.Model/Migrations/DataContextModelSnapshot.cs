// <auto-generated />
using System;
using JsonToPdf.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JsonToPdf.Model.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JsonToPdf.Model.Entities.BaseDocumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.ToTable("BaseDocumentsEntity");
                });

            modelBuilder.Entity("JsonToPdf.Model.Entities.ActOfReconciliation", b =>
                {
                    b.HasBaseType("JsonToPdf.Model.Entities.BaseDocumentEntity");

                    b.Property<string>("ActName")
                        .HasColumnType("VARCHAR(255)");

                    b.ToTable("ActsOfReconciliation");
                });

            modelBuilder.Entity("JsonToPdf.Model.Entities.ConsignmentNote", b =>
                {
                    b.HasBaseType("JsonToPdf.Model.Entities.BaseDocumentEntity");

                    b.Property<decimal>("ProdictId")
                        .HasColumnType("decimal(32,0)");

                    b.ToTable("ConsignmentsNotes");
                });

            modelBuilder.Entity("JsonToPdf.Model.Entities.Contract", b =>
                {
                    b.HasBaseType("JsonToPdf.Model.Entities.BaseDocumentEntity");

                    b.Property<DateTime>("DateOfContract")
                        .HasColumnType("datetime2");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("JsonToPdf.Model.Entities.GeneratedPdf", b =>
                {
                    b.HasBaseType("JsonToPdf.Model.Entities.BaseDocumentEntity");

                    b.Property<string>("PdfName")
                        .HasColumnType("VARCHAR(255)");

                    b.Property<int>("PdfStatus")
                        .HasColumnType("int");

                    b.ToTable("GeneratedPdfs");
                });

            modelBuilder.Entity("JsonToPdf.Model.Entities.ActOfReconciliation", b =>
                {
                    b.HasOne("JsonToPdf.Model.Entities.BaseDocumentEntity", null)
                        .WithOne()
                        .HasForeignKey("JsonToPdf.Model.Entities.ActOfReconciliation", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JsonToPdf.Model.Entities.ConsignmentNote", b =>
                {
                    b.HasOne("JsonToPdf.Model.Entities.BaseDocumentEntity", null)
                        .WithOne()
                        .HasForeignKey("JsonToPdf.Model.Entities.ConsignmentNote", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JsonToPdf.Model.Entities.Contract", b =>
                {
                    b.HasOne("JsonToPdf.Model.Entities.BaseDocumentEntity", null)
                        .WithOne()
                        .HasForeignKey("JsonToPdf.Model.Entities.Contract", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JsonToPdf.Model.Entities.GeneratedPdf", b =>
                {
                    b.HasOne("JsonToPdf.Model.Entities.BaseDocumentEntity", null)
                        .WithOne()
                        .HasForeignKey("JsonToPdf.Model.Entities.GeneratedPdf", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
